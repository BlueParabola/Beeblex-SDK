//
//  BBXIAPTransaction.h
//  beeblex
//
//  Created by Marco Tabini on 2012-07-16.
//  Copyright (c) 2012 Blue Parabola, LLC. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <StoreKit/StoreKit.h>


// The error codes used by BBXIAPTransaction.

extern const struct BBXIAPTransactionErrorCodes {
    
    // BBXIAPTransaction error domain. Note that
    // errors generated by the library could also come
    // from other domains (e.g.: network errors)
    
    __unsafe_unretained NSString *domain;
    
} BBXIAPTransactionErrorCodes;


// The transaction callback. You must provide a block that conforms
// to this signature in order to validate receipts.

typedef void(^BBXAPITransactionCompletionBlock)(NSError *error);


@interface BBXIAPTransaction : NSObject


// Whether the validation service should use the IAP sandbox.
// Note that this value may be overwritten on the server side.

@property (nonatomic) BOOL useSandbox;


// Whether to use a secure (HTTPS) connection. This does
// not affect the encryption of the data, which always takes
// place, but adds a layer of security on top of the basic
// security provided by Beeblex by using SSL to connect
// to the server. However, using SSL may put you at odds
// with U.S. export regulations, so HTTPS is off by default.

// Note that the library logs a warning when this is the case.

@property (nonatomic) DEPRECATED_ATTRIBUTE BOOL useSecureConnection;

// Whether the transaction is running

@property (nonatomic, readonly) BOOL running;

// Whether this transaction has already run (in which case,
// it cannot be reused).

@property (nonatomic, readonly) BOOL hasRun;

// Various non-terminal errors: configuration, client, or server
// errors should be considered transient and do not necessarily
// mean that a receipt is invalid.

// Note that a configuration error *must* be fixed before you
// shipped the app, or the service will never work!

@property (nonatomic, readonly) DEPRECATED_ATTRIBUTE BOOL hasConfigurationError;
@property (nonatomic, readonly) DEPRECATED_ATTRIBUTE BOOL hasClientError;
@property (nonatomic, readonly) BOOL hasServerError;

// If YES, the library believes that it has received an
// obsolete response from the server. It's possible someone
// is trying to perform a man-in-the-middle attack.

@property (nonatomic, readonly) BOOL validationExpired;

// If YES, there is a possible time mismatch between the server
// and the client. If the device's time is off by more than ten
// minutes from the current time, the server will refuse to
// process requests to help protect against time-based attacks.

@property (nonatomic, readonly) BOOL clientServerTimeMismatch;

// If YES, the transaction has been successfully validated against
// Apple servers.

// Note that a value of NO here means an invalid receipt
// only if hasConfigurationError, hasServerError, and
// validationExpired are also set to NO.

@property (nonatomic, readonly) BOOL transactionVerified;

// Whether the transaction is a duplicate. This means that the Beeblex
// server already has a transaction with this unique ID in its database.

// Note that Beeblex uses the “real” transaction ID returned by Apple
// when validating a receipt to track transactions to help prevent
// spoof attacks that use fake transaction IDs.

@property (nonatomic, readonly) BOOL transactionIsDuplicate;

// Upon a successful validation, this dictionary contains the actual
// receipt information returned by Apple to Beeblex while validating
// the receipt. You should use this information to determine whether
// the user has paid for a specific product, as it comes directly
// from Apple's servers.

@property (nonatomic, readonly) NSDictionary *validatedTransactionData;

// You should call this method *before* attempting to validate
// a receipt. It attempts to check whether the device is currently
// connected to the Internet.

// If this method returns YES and you encounter repeated connection
// errors, it is possible that an attacker is attempting to prevent
// Beeblex from running by blocking DNS resolution or routing to
// its servers.

+ (BOOL) canValidateTransactions;

// The designated initializer. Call this with a StoreKit payment transaction
// object to initialize a new BBXIAPTransaction instance.

// Note that BBXIAPTransaction objects cannot be reused: You must create
// a new instance for every request.

- (id) initWithTransaction:(SKPaymentTransaction *) transaction;

// Connects to Beeblex's servers and validates the Store Kit transaction
// that was passed in the initializer.

// Note that the transaction must be in completed or restored state,
// or the library will throw an exception.

- (void) validateWithCompletionBlock:(BBXAPITransactionCompletionBlock) completionBlock;

@end
